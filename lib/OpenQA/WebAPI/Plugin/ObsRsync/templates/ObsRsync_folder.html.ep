% layout 'bootstrap';
% content_for 'head' => begin
  %= asset 'codemirror.js'
  %= asset 'codemirror.css'
% end

% title 'OBS synchronization';
<h2>OBS synchronization for: <%= $folder %></h2>
<h3>Synchronization is performed in 3 steps:</h3>
<ul class="list-group">
  <li class="list-group-item flex-column align-items-start">
    <h5 class="mb-1">Step 1: Retrieve lists of required files from predefined OBS locations.</h5>
    <p class="mb-1">
        % if (!@$lst_files) {
            No files have been read so far.
        % } else {
            Lists retrieved during last run:
            <ul>
            % for my $filename (@$lst_files) {
                <li><%= link_to $filename => url_for('plugin_obs_rsync_download_file', folder => $folder, subfolder => ".run_last", filename => $filename) %></li>
            % }
            </ul>
        % }
    </p>
    <p class="mb-1">
        % if ($read_files_sh) {
            Script used to retrieve files:
            %= link_to $read_files_sh => url_for('plugin_obs_rsync_download_file', folder => $folder, subfolder => ".run_last", filename => $read_files_sh)
        % }
    </p>
  </li>
  <li class="list-group-item flex-column align-items-start">
    <h5 class="mb-1">Step 2: Generate and execute commands to rsync and rename deliverables from remote OBS location (based on lists from step 1)</h5>
    <p class="mb-1">
        % if (!@$rsync_commands) {
            No logs found for last run.
        % } else {
            Commands executed during last run:
            <ul>
            % for my $filename (@$rsync_commands) {
                <li><%= link_to $filename  => url_for('plugin_obs_rsync_download_file', folder => $folder, subfolder => ".run_last", filename => $filename) %></li>
            % }
            </ul>
        % }
    </p>
    <p class="mb-1">
        % if (@$rsync_sh) {
            Scripts used to generate commands:
            <ul>
            % for my $filename (@$rsync_sh) {
                <li><%= link_to $filename  => url_for('plugin_obs_rsync_download_file', folder => $folder, subfolder => ".run_last", filename => $filename) %></li>
            % }
            </ul>
        % }
    </p>
  </li>
  <li class="list-group-item flex-column align-items-start">
    <h5 class="mb-1">Step 3: Generate and execute openQA REST requests to trigger tests (based on lists from step 1)</h5>
    <p class="mb-1">
        % if (!@$openqa_commands) {
            No logs found for last run.
        % } else {
            Commands executed during last run:
            <ul>
            % for my $filename (@$openqa_commands) {
                <li><%= link_to $filename  => url_for('plugin_obs_rsync_download_file', folder => $folder, subfolder => ".run_last", filename => $filename) %></li>
            % }
            </ul>
        % }
    </p>
    <p class="mb-1">
        % if ($openqa_sh) {
            Script used to retrieve files:
            %= link_to $openqa_sh  => url_for('plugin_obs_rsync_download_file', folder => $folder, subfolder => ".run_last", filename => $openqa_sh)
        % }
    </p>
  </li>
</ul>

<div class="card" style="border: none;">
    <div class="card-body">
        <div class="btn-toolbar" role="toolbar">
            <div class="btn-group mr-2" role="group">
                %= link_to 'Show all logs' => url_for('plugin_obs_rsync_runs', folder => $folder), class => 'btn btn-primary', role => 'button'
            </div>
            <div class="btn-group mr-2" role="group">
                <button class='btn btn-warning' type='submit' alt='Sync now' title='Sync now' data-posturl=<%= url_for("plugin_obs_rsync_queue_run", folder => $obs_project) %> onclick='postAndRedirect(this,"/admin/obs_rsync/queue")'>Sync now</button>
            </div>
        </div>
    </div>
</div>
