
= openQA users guide
:toc: left
:toclevels: 6
:author: openQA developers

== Introduction

This document provides additional information for use of the web interface or
the REST API as well as administration information.
For administrators it is recommend to have read the
link:Installing.asciidoc[installation guide] first to understand the structure
of components as well as the configuration of an installed instance.

== Use of the web interface

In general the web UI should be intuitive or self-explanatory. Look out for the
little blue help icons and click them for detailed help on specific sections.

Some pages use queries to select what should be shown. The query parameters are
generated on clickable links, for example starting from the index page or the
group overview page clicking on single builds. On the query pages there can be
UI elements to control the parameters, for example to look for more older
builds or only show failed jobs or other settings. Additionally, the query
parameters can be tweaked by hand if you want to provide a link to specific
views.


=== /tests/overview - Customizable test overview page

The overview page is configurable by the filter box. Also, some additional
query parameters can be provided which can be considered advanced or
experimental. For example specifying no build will resolve the latest build
which matches the other parameters specified. Specifying no group will show
all jobs from all matching job groups. Also specifying multiple groups works,
see <<overview_multiple_groups,the following example>>.

[[overview_multiple_groups]]
.The openQA test overview page showing multiple groups at once. The URL query parameters specify the groupid parameter two times to resolve both the "opensuse" and "opensuse test" group.
image::images/tests-overview_multiple_groups.png[test overview page showing multiple groups]


=== Description of test suites

Test suites can be described using API commands or the admin table for any operator using the web UI.

[[test_suite_description_edit]]
.Entering a test suite description in the admin table using the web interface:
image::images/test_suite_description_edit.png[test suite description edit field]

If a description is defined, the name of the test suite on the tests overview page shows up as a link. Clicking the link will show the description in a popup. The same syntax as for comments can be used, that is Markdown with custom extensions such as shortened links to ticket systems.

[[test_suite_description_shown]]
.popover in test overview with content as configured in the test suites database:
image::images/test_suite_description_shown.png[test suite description popup]


=== Review badges ===

Based on comments in the individual job results for each build a certificate
icon is shown on the group overview page as well as the index page to indicate
that every failure has been reviewed, e.g. a bug reference or a test issue
reason is stated:

image::images/review_badges.png[Review badges]

==== Meaning of the different colors ====

* The green icons shows up when there is no work to be done.
* No icon is shown if at least one failure still need to be reviewed.
* The gray icon is shown if at least one softfailure with failing modules still
  need to be reviewed.
* The black icon is shown if all review work has been done.
* The pink icon is shown if all unicorns in openQA have been found!

(To simplify, checking for false-negatives is not considered here.)


=== Build tagging ===

==== Tag builds with special comments on group overview ====

Based on comments on the group overview individual builds can be tagged. As
'build' by themselves do not own any data the job group is used to store this
information. A tag has a build to link it to a build. It also has a type
and an optional description. The type can later on be used to distinguish
tag types.

The generic format for tags is
-------------
tag:<build_id>:<type>[:<description>], e.g. tag:1234:important:Beta1.
-------------

The more recent tag always wins.

A 'tag' icon is shown next to tagged builds together with the description on
the group_overview page. The index page does not show tags by default to prevent
a potential performance regression. Tags can be enabled on the index page using the
corresponding option in the filter form at the bottom of the page.

image::images/build_tagging.png[Example of a tag coment and corresponding tagged build]

==== Keeping important builds ====

As builds can now be tagged we come up with the convention that the
'important' type - the only one for now - is used to tag every job that
corresponds to a build as 'important' and keep the logs for these jobs longer so that
we can always refer to the attached data, e.g. for milestone builds, final
releases, jobs for which long-lasting bug reports exist, etc.


=== Filtering test results and builds ===

At the top of the test results overview page is a form which allows filtering tests by result,
architecture and TODO-status.

image::images/filter_form.png[Filter form]

There is also a similar form at the bottom of the index page which allows filtering builds by
group and customizing the limits.


=== Highlighting job dependencies in 'All tests' table

When hovering over the branch icon after the test name children of the job will
be highlighted blue and parents red. So far this only works for jobs displayed on
the same page of the table.

image::images/highlighting_job_dependencies.png[highlighted child jobs]

== Use of the REST API

openQA includes a _client_ script which - depending on the distribution - is
packaged independantly if you just want to interface with an existing openQA
instance without needing to install the full package. Call
`<openqa-folder>/script/client --help` for help (openSUSE: `openqa-client
--help`).

Basics are described in the
link:GettingStarted.asciidoc[Getting Started] guide.


=== Triggering tests

Tests can be triggered over multiple ways, using `clone_job.pl`, `jobs post`,
`isos post` as well as retriggering existing jobs or whole media over the web
UI.


==== Cloning existing jobs - clone_job.pl ====

If one wants to recreate an existing job from any publically available openQA
instance the script `clone_job.pl` can be used to copy the necessary settings
and assets to another instance and schedule the test. For the the test to be
executed it has to be ensured that matching ressources can be found, for
example a worker with matching `WORKER_CLASS` must be registered. More details
on `clone_job.pl` can be found in link:WritingTests.asciidoc[Writing Tests].


==== Spawning single new jobs - jobs post ====

Single jobs can be spawned using the `jobs post` API route. All necessary
settings on a job must be supplied in the API request. The "openQA client" has
examples for this.


==== Spawning multiple jobs based on templates - isos post ====

The most common way of spawning jobs on production instances is using the
`isos post` API route. Based on previously defined settings for media, job
groups, machines and test suites jobs are triggered based on template
matching. The link:GettingStarted.asciidoc[Getting Started] guide already
mentioned examples. Additionally to the necessary template matching parameters
more parameters can be specified which are forwarded to all triggered jobs.
There are also special parameters which only have an influence on the way the
triggering itself is done. These parameters all start with a leading
underscore but are set as request parameters in the same way as the other
parameters.

[horizontal]
.The following scheduling parameters exist

_NOOBSOLETEBUILD:: Do not obsolete jobs in older builds which would be
default. With this option jobs which are currently in execution, for example
scheduled or running, are not cancelled when a new medium is triggered.

_DEPRIORITIZEBUILD:: Setting this switch '1' will not immediately obsolete jobs of old
builds but rather deprioritize them up to a configurable limit of priority.

_DEPRIORITIZE_LIMIT:: The configurable limit of priority up to which jobs
should be deprioritized. Needs `_DEPRIORITIZEBUILD`. Default 100.

Example for `_DEPRIORITIZEBUILD` and `_DEPRIORITIZE_LIMIT`.

[source,sh]
--------------------------------------------------------------------------------
openqa-client isos post ISO=my_iso.iso DISTRI=my_distri FLAVOR=sweet \
         ARCH=my_arch VERSION=42 BUILD=1234 \
         _DEPRIORITIZEBUILD=1 _DEPRIORITIZE_LIMIT=120 \
--------------------------------------------------------------------------------


== Where to now?

For test developers it is recommended to continue with the
link:WritingTests.asciidoc[Test Developer Guide].
