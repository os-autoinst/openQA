<div class="card card-outline-secondary
     filter-panel-bottom"
     id="developer-panel"
     data-developer-url="<%= $ws_developer_url %>"
     data-status-only-url="<%= $ws_status_only_url %>"
     data-service-port-delta="<%= $service_port_delta %>"
     data-is-accessible="<%= ($is_devel_mode_accessible) ? ('true') : ('false') %>"
     data-own-user-id="<%= $current_user_id %>">
    <div class="card-header">
        <div class="row" id="developer-status">
            <div class="col-sm-7">
                <strong>Developer mode</strong>
            </div>
            <div class="col-sm-5">
                <span class="developer-mode-element" data-visible-on="isConnecting">
                retrieving status <i class="fa fa-spinner fa-spin fa-lg"></i>
                </span>
                <span class="developer-mode-element" id="developer-status-info" data-hidden-on="isConnecting">
                    unknown status
                </span>
            </div>
        </div>
        <div class="row card-header-appendix">
            <div class="col-sm-7" id="developer-session-info">
                % if ($developer_session) {
                    % my $tab_count = $developer_session->ws_connection_count;
                    owned by <%= $developer_session->user->name %>
                    (started
                        <abbr class="timeago" title="<%= $developer_session->t_created->datetime() %>Z">
                            %= format_time($developer_session->t_created)
                        </abbr>,
                    developer has <%= $tab_count %> browser <%= $tab_count == 1 ? 'tab' : 'tabs' %> open)
                % }
                % else {
                    regular test execution
                    % if ($is_devel_mode_accessible) {
                        - click to expand
                    % }
                % }
            </div>
            <div class="col-sm-5">
                <span class="developer-mode-element" id="developer-status-appendix" data-visible-on="isConnected">
                </span>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12" id="developer-flash-messages">
                <div id="developer-vnc-notice" class="alert alert-secondary developer-mode-element" role="alert" data-visible-on="isPaused,vncArg">
                    You might be able to connect to the SUT at <span class="vnc-arg">?</span> via VNC with shared mode enabled (eg. <code>vncviewer <span class="vnc-arg">?</span> -Shared</code> for TigerVNC).
                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        <p id="developer-stopping-note" class="developer-mode-element" data-visible-on="stoppingTestExecution">
            The test is about to stop.
        </p>
        <form action="#" method="get" id="developer-form" class="developer-mode-element"
            data-hidden-on="lockedByOtherDeveloper" data-visible-on="isConnected">
            <p>
                <span class="developer-mode-element" data-hidden-on="ownSession">
                    Change the test behaviour with the controls below and confirm to apply.
                    Taking control of this test will also forbid other users from doing so.
                </span>
                <span class="developer-mode-element" data-visible-on="ownSession">
                    Change the test behaviour with the controls below.
                </span>
                For more information, checkout the <a href="https://github.com/os-autoinst/openQA/blob/master/docs/UsersGuide.asciidoc#developer-mode" target="blank">documentation</a>.
            </p>
            <div class="form-group row">
                <div class="col-sm-5">
                    <label for="developer-pause-at-module" class="col-form-label">
                        Pause at module
                    </label>
                    <%= help_popover('Help for <i>pause test execution</i>' => '
                        <p>
                            Pauses the test execution at a specific module.
                            The SUT/VM itself is not paused. So it can be accessed via
                            VNC for further investigation.
                        </p>
                        <p>Resuming the job after it has been paused is possible.</p>
                        <p>A paused job still has the <code>MAX_JOB_TIME</code> constraint to be applied.</p>')
                    %>
                </div>
                <div class="col-sm-7">
                    <select class="custom-select" name="pause-at-module" id="developer-pause-at-module">
                        <option selected style="font-style: italic;" id="developer-no-module">Do not pause at a certain module</option>
                    </select>
                </div>
                <div class="col-sm-5">
                    <label for="developer-pause-on-timeout" class="col-form-label">
                        Pause on screen mismatch
                    </label>
                    <%= help_popover('Help for <i>pause test execution</i>' => '
                        <p>
                            Pauses the test execution on the next <code>assert_screen</code> or <code>check_screen</code>
                            timeout. The SUT/VM itself is not paused.
                        </p>
                        <p>On resume, the needles will be reloaded and the assertion is tried again.</p>
                        <p>A paused job still has the <code>MAX_JOB_TIME</code> constraint to be applied.</p>')
                    %>
                </div>
                <div class="col-sm-7">
                    <select class="custom-select" id="developer-pause-on-mismatch">
                        <option value="fail" selected style="font-style: italic;">Fail on mismatch as usual</option>
                        <option value="assert_screen"><code>assert_screen</code> timeout</option>
                        <option value="check_screen"><code>assert_screen</code> and <code>check_screen</code> timeout</option>
                    </select>
                </div>
                <div class="col-sm-5">
                    <label for="developer-pause-on-timeout" class="col-form-label">
                        Pause on next command
                    </label>
                    <%= help_popover('Help for <i>pause on next command</i>' => '
                        <p>
                            Pauses the test execution on the next command. Failures/timeouts are not suppressed,
                            though.
                        </p>
                        <p>A paused job still has the <code>MAX_JOB_TIME</code> constraint to be applied.</p>')
                    %>
                </div>
                <div class="col-sm-7">
                    <input type="checkbox" id="developer-pause-on-next-command">
                </div>
                <div class="col-sm-5">
                    <label for="developer-pause-on-failure" class="col-form-label">
                        Pause on failure (<strong>except</strong> screen mismatch assertions)
                    </label>
                    <%= help_popover('Help for <i>pause on failue</i>' => '
                        <p>
                            Pauses the test execution in case an assertion fails or the test fails due to an
                            unhandled exception.
                        </p>
                        <p>Does <em>not</em> affect screen mismatch assertions.</p>')
                    %>
                </div>
                <div class="col-sm-7">
                    <input type="checkbox" id="developer-pause-on-failure">
                </div>
            </div>
            <hr>
            <div>
                <a href="#" onclick="startDeveloperSession(); return false;"
                    class="btn btn-warning developer-mode-element" data-hidden-on="ownSession">
                    <i class="fa fa-lock"></i> Confirm to control this test
                </a>
                <a href="#" onclick="resumeTestExecution(); return false;"
                    class="btn btn-secondary developer-mode-element" data-visible-on="isPaused"
                    data-toggle="tooltip" data-placement="bottom" title="Resumes the test execution; new/updated needles are loaded before continuing">
                    <i class="fa fa-play-circle-o"></i> Resume test execution
                </a>
                <a href="#" onclick="resumeTestExecution(true); return false;"
                    class="btn btn-secondary developer-mode-element" data-visible-on="onFailure"
                    data-toggle="tooltip" data-placement="bottom" title="Ignores the failure and resumes the test execution">
                    <i class="fa fa-play-circle-o"></i> Ignore failure and resume
                </a>
                <a href="#" onclick="skipTimeout(); return false;"
                    class="btn btn-warning developer-mode-element" data-visible-on="canSkipTimeout"
                    data-toggle="tooltip" data-placement="bottom" title="Causes the current assert_screen/check_screen to fail immediately (supposed to be combined with pause on assert_screen)">
                    <i class="fa fa-play-circle-o"></i> Skip timeout
                </a>
                <a href="<%= url_for('edit_test', testid => $testid) %>"
                    class="btn btn-secondary developer-mode-element"
                    data-visible-on="needleEditorReady"
                    data-toggle="tooltip" data-placement="bottom" title="Allows creating/updating a needle from the latest screenshot/match (going back to the details to select a particular screenshot is of course possible as well)">
                    <i class="fa fa-thumb-tack"></i>
                    Open needle editor
                </a>
                % if (app->mode eq 'development') {
                    <a href="<%= url_for('developer_ws_console')->query({proxy => 1}) %>" target="blank"
                       class="btn btn-secondary developer-mode-element" data-visible-on="ownSession"
                       data-toggle="tooltip" data-placement="bottom" title="Opens a console intended for developing the developer mode itself">
                        <i class="fa fa-terminal"></i> Open console
                    </a>
                % }
            </div>
        </form>
        <div class="developer-mode-element" data-visible-on="lockedByOtherDeveloper">
            Another user has already locked this job.
        </div>
        <div class="developer-mode-element" data-visible-on="isConnecting">
            <i class="fa fa-spinner fa-spin fa-lg"></i> <span id="developer-loading-info">establishing connection to backend ...</span>
            <p>
                See <a href="http://open.qa/docs/#_steps_to_debug_developer_mode_setup" target="blank">steps to debug developer mode setup</a> if the connection can
                not be established in a reasonable time.
            </p>
        </div>
        <div id="developer-config-issue-note" class="developer-mode-element" data-visible-on="badConfiguration">
            The developer mode is not available because of a configuration issue.
            See <a href="http://open.qa/docs/#_steps_to_debug_developer_mode_setup" target="blank">steps to debug developer mode setup</a>.
        </div>
    </div>
</div>

<div id="canholder">
  <canvas id="livestream" width="1024" height="768" data-url='<%= url_for("streaming", testid => $testid) %>'>
  </canvas>
</div>

<div class="card filter-panel-bottom" id="live-log-panel">
    <div class="card-header">
        <strong>Live log</strong>
        <span>click to toggle</span>
    </div>
    <div class="card-body">
        <pre id="livelog" data-url='<%= url_for("livelog", testid => $testid) %>'></pre>
        <form action="#">
            <div>
                <input type="checkbox" id="scrolldown" checked="checked" />
                <label for="scrolldown">Autoscroll log</label>
            </div>
        </form>
    </div>
</div>

<div class="card filter-panel-bottom" id="live-terminal-panel">
    <div class="card-header">
        <strong>Serial output</strong> (serial0.txt, serial_terminal.txt and serial_terminal_user.txt)
        <span>click to toggle</span>
    </div>
    <div class="card-body">
        <pre id="liveterminal" data-url='<%= url_for("liveterminal", testid => $testid) %>'></pre>
    </div>
</div>
