% use OpenQA::Jobs::Constants;
            <div class="card-header">
                Results for
                % if (current_route 'latest') {
                    <%= link_to $job->id => url_for ('test', testid => $job->id) %>:
                % }
                <i><a class="copy-jobid" href="#" data-jobid="<%= $job->id %>">#<%= $job->id %></a></i>
                %= $job->name
                % if ($job->archived) {
                    <span id="job-archived-badge" class="badge rounded-pill text-bg-secondary" title="Job has been archived">
                        <i class="fa fa-file-archive-o"></i>
                    </span>
                % }
            </div>
            <div id="info-box-content" class="card-body row"
                % if ($additional_data) {
                    data-favicon-url-16="<%= favicon_url '-16.png' %>" data-favicon-url-svg="<%= favicon_url '.svg' %>"
                % }
            >
                <div class="col-xl">
                <div>
                    % if ($job->state eq DONE) {
                        <div class="badge rounded-pill text-bg-light modules-badge">
                            %= $job->passed_module_count
                            <i class='fa module_passed fa-star' title='modules passed'></i>
                            % if ($job->softfailed_module_count) {
                                %= $job->softfailed_module_count
                                <i class='fa module_softfailed fa-star-half' title='modules with warnings'></i>
                            % }
                            % if ($job->failed_module_count) {
                                %= $job->failed_module_count
                                <i class='fa module_failed fa-star' title='modules failed'></i>
                            % }
                            % if ($job->skipped_module_count) {
                                %= $job->skipped_module_count
                                <i class='fa module_none fa-ban' title='modules skipped'></i>
                            % }
                            % if ($job->externally_skipped_module_count) {
                                %= $job->externally_skipped_module_count
                                <i class='fa module_skipped fa-angle-double-right' title='modules externally skipped'></i>
                            % }
                        </div>

                        Result: <b><%= $job->result %></b>\
                    % }
                    % else {
                        % my $state_detail = '';
                        % if (@$gru_dependencies) {
                            % $state_detail = join(';', map {
                            %   $_->{href} ? link_to($_->{label} => $_->{href}) : $_->{label}
                            % } @$gru_dependencies);
                            % $state_detail = qq{, waiting for background tasks ($state_detail)};
                        % }
                        State: <b><%= $job->state %></b><%== $state_detail %>\
                    % }
                    % if ($job->t_finished) {
                        <%= ', finished' =%>
                        <abbr class="timeago" title="<%= $job->t_finished->datetime() %>Z"><%= format_time($job->t_finished) %></abbr>
                        % if (my $t_started = $job->t_started) {
                            (<span>ran for </span><%= format_time_duration($job->t_finished - $t_started) =%>)
                        % }
                    % }
                    % elsif ($job->t_started) {
                        <%= ', started' =%>
                        <abbr class="timeago" title="<%= $job->t_started->datetime() %>Z"><%= format_time($job->t_started) %></abbr>
                    % }
                    % else {
                        <%= ', created' =%>
                        <abbr class="timeago" title="<%= $job->t_created->datetime() %>Z"><%= format_time($job->t_created) %></abbr>
                    % }
                    % if (my $reason = $job->reason) {
                        <br>Reason: <%= $reason %>
                    % }
                </div>
                % if (my $developer_session = $job->developer_session) {
                    <div id="developer-global-session-info">
                        % if ($job->t_finished) {
                            Developer session was opened during testrun by
                        % }
                        % else {
                            Developer session has been opened by
                        % }
                        %= $developer_session->user->name
                    </div>
                % } else {
                     <div id="developer-global-session-info" style="display: none;"></div>
                % }
                <div id="clones">
                    % if ($clone_of) {
                        Clone of
                        %= link_to $clone_of->id => url_for ('test', testid => $clone_of->id)
                        (restarted already <%= $ancestors >= $ancestors_limit ? 'more than ' : '' %><%= $ancestors %> time<%= $ancestors != 1 ? 's' : '' %>)
                    % }
                    % if (my $clone_id = $job->clone_id) {
                        Cloned as
                        %= link_to $clone_id => url_for ('test', testid => $clone_id)
                    % }
                </div>
                <div id="scheduled-product-info">
                    Scheduled product:\
                    % if (my $scheduled_product = $job->scheduled_product) {
                        % my $sp_id = $scheduled_product->id;
                        %= link_to $scheduled_product->to_string, url_for('admin_product_log')->query(id => $sp_id)
                    % } else {
                        job has not been created by posting an ISO
                        % if ($clone_of) {
                            (but possibly the <%= link_to 'original job' => url_for ('test', testid => $clone_of->id) %>)
                        % }
                    % }
                </div>
                % if ($job->state eq SCHEDULED) {
                    <div>
                        Priority:
                        % if (is_operator) {
                            <a class="prio-down" data-method="post" href="javascript:void(0);" onclick="decreaseJobPrio(<%= $job->id %>, this);">
                                <i class="fa fa-minus-square-o"></i>
                            </a>
                            <span class="prio-value"><%= $job->priority %></span>
                            <a class="prio-up" data-method="post" href="javascript:void(0);" onclick="increaseJobPrio(<%= $job->id %>, this);">
                                <i class="fa fa-plus-square-o"></i>
                            </a>
                        % } else {
                            <span class="prio-value"><%= $job->priority %></span>
                        % }
                        &nbsp;<a href="https://open.qa/docs/#_job_groups_2" target="_blank"><i class="fa fa-question-circle-o" data-bs-toggle="tooltip" data-bs-title="Jobs with lower priority values are scheduled earlier (default: 50)"></i></a>
                    </div>
                % }
                % if ($worker) {
                    <div id="assigned-worker">
                        Assigned worker:
                        <span title="VNC display number: <%= 90 + $worker->instance %>">
                            %= link_to $worker->name => url_for('admin_worker_show', worker_id => $worker->id)
                        </span>
                    </div>
                % }
                % if (my $scenario_description = $job->rendered_scenario_description) {
                    <div id="scenario-description">
                            %= $scenario_description
                    </div>
                % }
                </div>
                % if (is_operator) {
                <div class="info-panel-actions col-xl-auto">
                    <strong>Actions:</strong><br>
                    % if (!$job->is_pristine) {
                      <div class="btn-group btn-group-sm dropstart">
                        % my $has_dependencies = $job->has_dependencies;
                        % my $ok_results_explanation = join '/', OK_RESULTS;
                        % if ($has_dependencies) {
                          <button class="btn btn-secondary dropdown-toggle" type="button" id="restart-button-options" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="caret" title="Additional options for restarting jobs with dependencies"></span>
                          </button>
                          <div class="dropdown-menu" role="menu" aria-labelledby="restart-button-options" id="restart-menu">
                            %= link_post url_for('apiv1_restart', jobid => $testid)->query({skip_parents => 1}) => (class => 'dropdown-item restart-result', 'data-remote' => 'true', id => 'restart-result-skip-parents', 'data-jobid' => $testid) => begin
                            <span>Skip parents</span>
                            %= end
                            %= link_post url_for('apiv1_restart', jobid => $testid)->query({skip_children => 1}) => (class => 'dropdown-item restart-result', 'data-remote' => 'true', id => 'restart-result-skip-children', 'data-jobid' => $testid) => begin
                            <span>Skip children</span>
                            %= end
                            %= link_post url_for('apiv1_restart', jobid => $testid)->query({skip_ok_result_children => 1}) => (class => 'dropdown-item restart-result', 'data-remote' => 'true', id => 'restart-result-skip-ok-children', 'data-jobid' => $testid) => begin
                            <span>Skip restarting "OK" (<%= $ok_results_explanation %>) children</span>
                            %= end
                          </div>
                        % }
                        % my $restart_text = $has_dependencies ? 'Restart this and dependent jobs' : 'Restart job';
                        % my $class = 'btn btn-secondary restart-result';
                        % $class .= ' disabled' if defined $job->clone_id;
                        %= link_post url_for('apiv1_restart', jobid => $testid) => (class => $class, 'data-remote' => 'true', id => 'restart-result', 'data-jobid' => $testid) => begin
                            <i class="fa fa-2 fa-undo"></i><span><%= $restart_text %></span>
                        %= end
                        % my $disabled_note = defined $job->clone_id ? '<p><strong>This job cannot be restarted because it has already been restarted.</strong></p><hr>' : '';
                        <%= help_popover('Restart job' => "$disabled_note
                            <p>Restarts the job and certain dependent jobs.</p>
                            <p>Rules for restarting dependencies:</p>
                            <ul>
                                <li>If the job is part of a parallel cluster, all jobs within that cluster are restarted.</li>
                                <li>Any kind of chained child jobs are restarted.</li>
                                <li>Directly chained parent jobs are restarted.</li>
                            </ul>
                            All rules are applied recursively. Advanced restarting options allow changing the behavior, e.g. excluding parents and $ok_results_explanation children. You can open the menu of advanced restarting options by clicking on the triangle icon
                            on the left side of the <em>$restart_text</em> button for jobs with dependencies.",
                            'https://open.qa/docs/#_handling_of_related_jobs_on_failure_cancellation_restart', 'documentation', 'bottom', class => 'help_popover fa fa-question-circle btn btn-secondary');
                        %>
                      </div>
                    % }
                    % if (OpenQA::Jobs::Constants::meta_state($job->state) ne OpenQA::Jobs::Constants::FINAL) {
                      <div class="btn-group btn-group-sm">
                        %= link_post url_for('apiv1_cancel', jobid => $job->id) => (class => 'btn btn-warning', 'data-remote' => 'true', id => 'cancel_running') => begin
                            <i class="fa fa-2 fa-times-circle-o"></i><span>Cancel job</span>
                        % end
                      </div>
                    % }
                    % if (my $sp_id = $job->scheduled_product_id) {
                        <div class="btn-group btn-group-sm">
                        <% my $first_dep = $job->children->first; %>
                        % if ($show_dependencies && $first_dep && $first_dep->dependency == 2) {
                            % my $parallel_child = $first_dep->child_job_id;
                            <a href="#"
                                id="restart-scheduled-product" \
                                onclick="return rescheduleProductForJob(this);" \
                                class="btn btn-danger disabled"\
                                data-url="<%= url_for('apiv1_create_iso')->query(scheduled_product_clone_id => $sp_id, TEST => $job->TEST, _SKIP_CHAINED_DEPS => 1, _INCLUDE_CHILDREN => 1) %>">\
                                <i class="fa fa-2 fa-refresh"></i><span>Schedule only from <%= $parallel_child %> </span>
                            </a>
                        % }
                        % else {
                            <a href="#"
                                id="restart-scheduled-product" \
                                onclick="return rescheduleProductForJob(this);" \
                                class="btn btn-danger"\
                                data-url="<%= url_for('apiv1_create_iso')->query(scheduled_product_clone_id => $sp_id, TEST => $job->TEST, _SKIP_CHAINED_DEPS => 1, _INCLUDE_CHILDREN => 1) %>">\
                                <i class="fa fa-2 fa-refresh"></i><span>Reschedule product from here</span>
                            </a>
                        % }
                        <%= help_popover('Partial product re-scheduling' => "
                          <p>Schedules the product again using the current job as starting point. That means chained parents of
                          the current job will not be scheduled again but all its children will be. The re-scheduling is <strong>not</strong>
                          limited to the current job group.</p>",
                          undef, undef, 'bottom', class => 'help_popover fa fa-question-circle btn btn-danger');
                         %>
                         </div>
                    % }
                </div>
                % }
            </div>
