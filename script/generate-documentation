#!/bin/bash
# Copyright (C) 2016 SUSE LLC
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, see <http://www.gnu.org/licenses/>.

function update_docs {

        call_asciidoctor

        git clone $REPO out
        cd out
        git checkout $TARGET_BRANCH
        git config user.name "Travis CI"
        git config user.email "$COMMIT_AUTHOR_EMAIL"
        mkdir -p docs
        cp -r ${tmpwd}/output/* docs
        cd docs
        ls -l 
        git add images
        update_api
        ln -f openqa-documentation-${verbose_doc_name}.html index.html
        ln -f openqa-documentation-${verbose_doc_name}.pdf current.pdf

        cd ..
        git add _includes/api.html
        git add docs/index.html docs/current.pdf docs/api/testapi.html
        echo "Update documentation to commit ${shortref}" > last.commit
        echo "" >> last.commit # somehow travis does not like \n
        (cd .. && git log --pretty=fuller ${TRAVIS_COMMIT} -1 >> out/last.commit)
        git commit -F last.commit
        git push $SSH_REPO $TARGET_BRANCH
        cd ..
        rm -rf out

}

function  update_api {

        mkdir -p api/src
        curl -o api/src/testapi.pm https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/testapi.pm
        cd api
        ${TRAVIS_BUILD_DIR}/script/generate-documentation-genapi.pl

        for file in $(ls *.asciidoc | grep -v header ); do
                ${asciidoctor_bin} $file
        done;

        for file in $( find -regex '.*\.html' ); do
                header_template $file > $file.tmp
                cat $file >> $file.tmp
                mv $file.tmp $file
        done;
        cd ..

}

function header_template {
filename=$( basename -s .html $1 )
cat <<APIFILE
---
layout: null
categories: [api]
title: ${filename}
permalink: /api/${filename}/
---
APIFILE

}

green="\e[23m\e[1m"

asciidoctor_bin="/bin/not/set"
shortref=$(git rev-parse --short HEAD)
verbose_doc_name=$(date +%Y%m%d)"_"${shortref} #we are not intending to run this off a git repository
tmpwd=$(mktemp -d -t openqa-doc-XXXX)
REPO=$(git config remote.origin.url)
SSH_REPO=${REPO/https:\/\/github.com\//git@github.com:}
TARGET_BRANCH="gh-pages"
REPO_DIRECTORY=$PWD
SSH_KEY=$1
SSH_IV=$2


function check_asciidoctor {

    asciidoctor_bin=$(which asciidoctor)

    if [ -z "${asciidoctor_bin}" -o ! -f "${asciidoctor_bin}" ]; then
        echo "Could not find asciidoctor binary in your path, please install it and run this command again"
        echo "gem install asciidoctor pygments.rb"
        echo "gem install asciidoctor-pdf --pre"
        exit 1
    fi

}

function set_sshkey {
    openssl aes-256-cbc -K $SSH_KEY -iv $SSH_IV -in .openqa-travis.enc -out .openqa-travis -d
    chmod 600 .openqa-travis
    eval "$(ssh-agent -s)"
    ssh-add .openqa-travis
}

function install_asciidoctor {
    # install dependencies
    gem install asciidoctor pygments.rb
    gem install asciidoctor-pdf --pre
    cpanm --install Pod::AsciiDoctor
}

function call_asciidoctor {

    check_asciidoctor

    cd docs
    mkdir ${tmpwd}/output 2>/dev/null || true # we don't care if the directory already exists
    cp -r images ${tmpwd}/output

    ${asciidoctor_bin} -r asciidoctor-pdf -b pdf -o ${tmpwd}/output/openqa-documentation-${verbose_doc_name}.pdf index.asciidoc -d book
    ${asciidoctor_bin} -o ${tmpwd}/output/openqa-documentation-${verbose_doc_name}.html index.asciidoc -d book

    echo -e  "${green}The output has been generated at ${tmpwd}/output"

    cd ..
}

if [ ${CONTINUOUS_INTEGRATION} ]; then
    if [ "${TRAVIS_BRANCH}" != "master" ]; then
        echo "Branch is: ${TRAVIS_BRANCH}, not generating any documentation"
        exit 0
    fi

    if [ "${TRAVIS_PULL_REQUEST}" != false ]; then
        echo "Build is a pull request, not generating any documentation"
        exit 0
    fi

    if [ -z "${SSH_KEY}" -o -z "${SSH_IV}" ]; then
        echo "Build is a pull request, not generating any documentation"
        exit 0
    fi

    if [ -z ${GH_PUBLISH} ]; then
        echo "There's no need to generate the documentation"
        exit 0
    fi

    echo "Requirements met, generating documentation"

    set_sshkey
    install_asciidoctor
    update_docs

else
    call_asciidoctor
fi
