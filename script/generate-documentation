#!/bin/bash -e
# shellcheck disable=SC2103
# Copyright (C) 2016-2019 SUSE LLC
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, see <http://www.gnu.org/licenses/>.

# the script accepts input arguments:
# $1 - target repo (which repository is used for documentation commit), 
# defaults to current repo
# $2 - target branch, defaults to gh-pages

# the script uses environment variables:
# PUBLISH - non-empty string indicates that commit should be pushed back to target repo
# (authentification must be set up in advance)
# PULL_REQUEST_TARGET - if set, then will be passed to `hub pull-request` command
# (authentification must be set up in advance)

update_docs() {
        git clone -b "$TARGET_BRANCH" --single-branch "$TARGET_REMOTE" out
        cd out
        if [ -n "${COMMIT_AUTHOR_EMAIL}" ]; then
            git config user.name "CI"
            git config user.email "$COMMIT_AUTHOR_EMAIL"
        fi
        mkdir -p docs
        cp -r "${tmpwd}"/output/* docs
        cd docs
        ls -l
        git add images
        update_api
        update_schemas
        ln -f openqa-documentation-"${verbose_doc_name}".html index.html
        ln -f openqa-documentation-"${verbose_doc_name}".pdf current.pdf
        # "Change is inevitable, except for vending machines"
        # gh#1480
        # 2 files changed, 2 insertions(+), 2 deletions(-)
        ANYTHING_CHANGED=$(git diff --shortstat | perl -ne 'my $n; print $n = () = m/(?: 2 \w+)/g')
        if [ "${ANYTHING_CHANGED}" -ne 3 ] && [ -n "${ANYTHING_CHANGED}" ]; then
            cd ..
            git add _includes/api.html
            git add docs/index.html docs/current.pdf docs/api/testapi.html
            git add docs/api/schema
            topic="Update documentation to commit ${shortref}"
            echo "$topic" > last.commit
            echo "" >> last.commit # somehow travis does not like \n
            [[ -z "${CIRCLE_SHA1}" ]] || (cd .. && git log --pretty=fuller "${CIRCLE_SHA1}" -1 >> out/last.commit)
            git commit -F last.commit
            if [[ -n "${PUBLISH}" ]] && [[ "${PUBLISH}" != 0 ]]; then
                git push -q -f "$TARGET_REMOTE" "$TARGET_BRANCH"
                [[ -z "${PULL_REQUEST_TARGET}" ]] || hub pull-request -m "$topic" --base "${PULL_REQUEST_TARGET}"
            fi
            cd ..
        fi
        rm -rf out
}

update_api() {
        mkdir -p api/src
        curl -o api/src/testapi.pm https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/testapi.pm
        cd api
        "${scriptroot}"/generate-documentation-genapi

        find . -name '*.asciidoc' -not -name 'header' -exec "${asciidoctor_bin}" {} \;
        while IFS= read -r -d '' file
        do
            header_template "$file" > "$file.tmp"
            cat "$file" >> "$file.tmp"
            mv "$file.tmp" "$file"
        done < <(find . -name '*.html' -print0)
        cd ..
}

update_schemas() {
        mkdir -p api/schema
        cp "$scriptroot"/../public/schema/* api/schema
}

header_template() {
filename=$( basename -s .html "$1" )
cat <<APIFILE
---
layout: null
categories: [api]
title: ${filename}
permalink: /api/${filename}/
---
APIFILE

}

green="\e[23m\e[1m"

asciidoctor_bin="/bin/not/set"
shortref=$(git rev-parse --short HEAD)
verbose_doc_name=$(date +%Y%m%d)"_"${shortref} #we are not intending to run this off a git repository
scriptroot="$( cd "$(dirname "$0")" ; pwd -P )"
tmpwd=$(mktemp -d -t openqa-doc-XXXX)
TARGET_REMOTE="${1:-$(git config --get remote.origin.url)}"
TARGET_BRANCH="${2:-gh-pages}"
PUBLISH="${PUBLISH}"

check_asciidoctor() {
    asciidoctor_bin=$(command -v asciidoctor) || true
    [[ -n "$asciidoctor_bin" ]] || \
        for asciidoctor_bin in "${GEM_HOME}"/bin/asciidoctor.ruby*; do :; done

    if [[ -z "$asciidoctor_bin" ]] || [[ ! -f $asciidoctor_bin ]]; then
        echo "Could not find asciidoctor binary in your path, please install it and run this command again:"
        echo "    sudo gem install asciidoctor pygments.rb"
        echo "    sudo gem install asciidoctor-pdf --pre"
        echo "    sudo zypper install ruby2.6-rubygem-asciidoctor"
        echo "    sudo zypper install 'perl(Pod::AsciiDoctor)'"
        exit 1
    fi
}

install_asciidoctor() {
    # install dependencies
    gem install asciidoctor pygments.rb
    gem install asciidoctor-pdf --pre
    cpanm --install Pod::AsciiDoctor
}

call_asciidoctor() {

    check_asciidoctor

    cd docs
    mkdir "${tmpwd}"/output 2>/dev/null || true  # we don't care if the directory already exists
    cp -r images "${tmpwd}"/output

    ${asciidoctor_bin} -r asciidoctor-pdf -b pdf -o "${tmpwd}"/output/openqa-documentation-"${verbose_doc_name}".pdf index.asciidoc -d book
    ${asciidoctor_bin} -o "${tmpwd}"/output/openqa-documentation-"${verbose_doc_name}".html index.asciidoc -d book

    echo -e  "${green}The output has been generated at ${tmpwd}/output"

    cd ..
}

if [[ -n ${CI} ]]; then
    cpanm --local-lib=~/perl5 local::lib && eval "$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib)"
    install_asciidoctor
fi

call_asciidoctor
update_docs
