#!/bin/bash -e
# shellcheck disable=SC2103
# Copyright (C) 2016-2019 SUSE LLC
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, see <http://www.gnu.org/licenses/>.

update_docs() {
        git clone "$REPO" out
        cd out
        git checkout "$TARGET_BRANCH"
        if [ -n "${COMMIT_AUTHOR_EMAIL}" ]; then
            git config user.name "Travis CI"
            git config user.email "$COMMIT_AUTHOR_EMAIL"
        fi
        mkdir -p docs
        cp -r "${tmpwd}"/output/* docs
        cd docs
        ls -l
        git add images
        update_api
        update_schemas
        ln -f openqa-documentation-"${verbose_doc_name}".html index.html
        ln -f openqa-documentation-"${verbose_doc_name}".pdf current.pdf
        # "Change is inevitable, except for vending machines"
        # gh#1480
        # 2 files changed, 2 insertions(+), 2 deletions(-)
        ANYTHING_CHANGED=$(git diff --shortstat | perl -ne 'my $n; print $n = () = m/(?: 2 \w+)/g')
        if [ "${ANYTHING_CHANGED}" -ne 3 ]; then
            cd ..
            git add _includes/api.html
            git add docs/index.html docs/current.pdf docs/api/testapi.html
            git add docs/api/schema
            echo "Update documentation to commit ${shortref}" > last.commit
            echo "" >> last.commit # somehow travis does not like \n
            [[ -n ${TRAVIS_COMMIT} ]] && (cd .. && git log --pretty=fuller "${TRAVIS_COMMIT}" -1 >> out/last.commit)
            echo "" >> last.commit
            echo "[ci skip]" >> last.commit
            git commit -F last.commit
            [[ -n ${publish} ]] && git push "$SSH_REPO" "$TARGET_BRANCH"
            cd ..
        fi
        rm -rf out

}

update_api() {
        mkdir -p api/src
        curl -o api/src/testapi.pm https://raw.githubusercontent.com/os-autoinst/os-autoinst/master/testapi.pm
        cd api
        "${scriptroot}"/generate-documentation-genapi

        find . -name '*.asciidoc' -not -name 'header' -exec "${asciidoctor_bin}" {} \;
        while IFS= read -r -d '' file
        do
            header_template "$file" > "$file.tmp"
            cat "$file" >> "$file.tmp"
            mv "$file.tmp" "$file"
        done < <(find . -name '*.html' -print0)
        cd ..
}

update_schemas() {
        mkdir -p api/schema
        cp "$scriptroot"/../public/schema/* api/schema
}

header_template() {
filename=$( basename -s .html "$1" )
cat <<APIFILE
---
layout: null
categories: [api]
title: ${filename}
permalink: /api/${filename}/
---
APIFILE

}

green="\e[23m\e[1m"

asciidoctor_bin="/bin/not/set"
shortref=$(git rev-parse --short HEAD)
verbose_doc_name=$(date +%Y%m%d)"_"${shortref} #we are not intending to run this off a git repository
scriptroot="$( cd "$(dirname "$0")" ; pwd -P )"
publish=
tmpwd=$(mktemp -d -t openqa-doc-XXXX)
REPO=$(git config remote.origin.url)
SSH_REPO=${REPO/https:\/\/github.com\//git@github.com:}
TARGET_BRANCH="gh-pages"
SSH_KEY=$1
SSH_IV=$2


check_asciidoctor() {
    asciidoctor_bin=$(command -v asciidoctor) || true
    if [[ -z $asciidoctor_bin ]] || [[ ! -f $asciidoctor_bin ]]; then
        echo "Could not find asciidoctor binary in your path, please install it and run this command again:"
        echo "    sudo gem install asciidoctor pygments.rb"
        echo "    sudo gem install asciidoctor-pdf --pre"
        echo "    sudo zypper install ruby2.6-rubygem-asciidoctor"
        echo "    sudo zypper install 'perl(Pod::AsciiDoctor)'"
        exit 1
    fi
}

set_sshkey() {
    openssl aes-256-cbc -K "$SSH_KEY" -iv "$SSH_IV" -in .openqa-travis.enc -out .openqa-travis -d
    chmod 600 .openqa-travis
    eval "$(ssh-agent -s)"
    ssh-add .openqa-travis
}

install_asciidoctor() {
    # install dependencies
    gem install asciidoctor pygments.rb
    gem install asciidoctor-pdf --pre
    cpanm --install Pod::AsciiDoctor
}

call_asciidoctor() {

    check_asciidoctor

    cd docs
    mkdir "${tmpwd}"/output 2>/dev/null || true  # we don't care if the directory already exists
    cp -r images "${tmpwd}"/output

    ${asciidoctor_bin} -r asciidoctor-pdf -b pdf -o "${tmpwd}"/output/openqa-documentation-"${verbose_doc_name}".pdf index.asciidoc -d book
    ${asciidoctor_bin} -o "${tmpwd}"/output/openqa-documentation-"${verbose_doc_name}".html index.asciidoc -d book

    echo -e  "${green}The output has been generated at ${tmpwd}/output"

    cd ..
}

if [[ ${TRAVIS_PULL_REQUEST} == false ]] && [[ -n ${SSH_KEY} ]] && [[ -n ${SSH_IV} ]]; then
    publish=1
    set_sshkey
fi
if [[ -n ${CONTINUOUS_INTEGRATION} ]]; then
    cpanm --local-lib=~/perl5 local::lib && eval "$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib)"
    install_asciidoctor
fi

call_asciidoctor
update_docs
