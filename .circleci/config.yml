version: 2

aliases:
  - &restore_cache
    keys:
      - v1-{{ checksum ".circleci/dependencies.txt" }}-{{ checksum ".circleci/build_cache.sh" }}

  - &save_cache
    key: v1-{{ checksum ".circleci/dependencies.txt" }}-{{ checksum ".circleci/build_cache.sh" }}
    paths:
      - "/var/cache/zypp/packages"

  - &restore_fullstack_cache
    keys:
      - v1-{{ checksum ".circleci/autoinst.sha" }}-{{ checksum ".circleci/build_autoinst.sh" }}

  - &save_fullstack_cache
    key: v1-{{ checksum ".circleci/autoinst.sha" }}-{{ checksum ".circleci/build_autoinst.sh" }}
    paths:
      - "/var/cache/autoinst"

  - &chown_hack_for_cache
    command: |
      [ -z "$CIRCLE_WORKFLOW_ID" ] || sudo chown -R squamata /var/cache/zypp/packages

  - &chown_hack_for_cache_fullstack
    command: |
      # hack as we don't want run container as root
      [ -z "$CIRCLE_WORKFLOW_ID" ] || {
        sudo chown -R squamata /var/cache/zypp/packages
        sudo mkdir -p /var/cache/autoinst
        sudo chown -R squamata /var/cache/autoinst
      }

  - &show_diagnostic_info
    command: |
      find /var/cache/zypp/packages/ | wc -l
      [ -z "$CIRCLE_WORKFLOW_ID" ] || ls -lRa /var/cache/zypp/packages/openQA || :

  - &check_cache
    command: |
      find /var/cache/zypp/packages/ | wc -l
      [ -z "$CIRCLE_WORKFLOW_ID" ] || ls -lRa /var/cache/zypp/packages/openQA

  - &install_cached_packages
    command: |
        set -x
        if [ -z "$CIRCLE_WORKFLOW_ID" ]; then
          bash .circleci/build_cache.sh
        else
          sudo rpm -i -f $(find /var/cache/zypp/packages/ | grep '.rpm$')
        fi

  - &build_autoinst
    command: |
      if [ ! -z "$CIRCLE_WORKFLOW_ID" ]; then # only in workflow
        rm -rf ../os-autoinst
        sudo cp -r /var/cache/autoinst ../os-autoinst
        sudo chown -R 1000 ../os-autoinst/t/data
      else # only in local run
         [ -d ../os-autoinst ] || { sudo mkdir ../os-autoinst && sudo chown -R 1000 ../os-autoinst; }
         bash .circleci/build_autoinst.sh ../os-autoinst $(cat .circleci/autoinst.sha)
       fi

  - &make_test
    command: |
      if [[ "$CIRCLE_BRANCH" == master ]] || [[ "$CIRCLE_BRANCH" == pull* ]] ; then
        make coverage-with-db-$TEST_PART
      else
        make test-with-db-$TEST_PART
      fi

images:
  - &docker_config
    user: squamata

  - &base
    image: registry.opensuse.org/devel/openqa/ci/containers/base:latest
    <<: *docker_config

  - &dependency_bot
    image: registry.opensuse.org/devel/openqa/ci/containers/dependency_bot:latest

jobs:
  dependencies-pr:
    docker:
      - <<: *dependency_bot
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: |
            git config user.email "skynet@open.qa"
            git config user.name "Dependency bot circleci"
            git config core.autocrlf true
            hub --version
      - run:
          command: |
            depid=$(date +%y%m%d%H%M%S)
            git checkout -b dependency_$depid
            bash .circleci/build_dependencies.sh

            git --no-pager diff .circleci/dependencies.txt
            set -x
            git diff --quiet .circleci/dependencies.txt || (
                set +o pipefail
                curl -s https://api.github.com/repos/os-autoinst/os-autoinst/commits | grep sha | head -n 1 | grep -o -E '[0-9a-f]{40}' > .circleci/autoinst.sha
                git add .circleci/dependencies.txt .circleci/autoinst.sha
                git commit -m "Dependency cron $depid"
                echo 'echo $GITHUB_TOKEN' > $(pwd)/.git-askpass
                export GIT_ASKPASS=$(pwd)/.git-askpass
                chmod +x $(pwd)/.git-askpass
                git push -q -f https://token@github.com/openqabot/openQA.git dependency_$depid
                hub pull-request -m "Dependency cron $depid" --base $CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH --head openqabot:dependency_$depid
            )

  build.cache:
    docker:
      - <<: *base
    steps:
      - checkout
      - run: ls -la && pwd
      - run: cat .circleci/dependencies.txt
      - run: *chown_hack_for_cache
      - restore_cache: *restore_cache
      - run: *show_diagnostic_info
      - run:
          command: |
            if [ ! -d /var/cache/zypp/packages/openQA ]; then
              bash -x .circleci/build_cache.sh
            fi
      - save_cache: *save_cache

  build.fullstack.cache:
    docker:
      - <<: *base
    steps:
      - checkout
      - run: *chown_hack_for_cache_fullstack
      - restore_cache: *restore_cache
      - restore_cache: *restore_fullstack_cache
      - run: find /var/cache/zypp/packages/ | wc -l
      - run:
          command: |
            ls -lRa /var/cache/zypp/packages/openQA || :
            if [ ! -d /var/cache/autoinst/t ]; then
              bash -x .circleci/build_autoinst.sh "/var/cache/autoinst"
            fi
      - save_cache: *save_fullstack_cache

  t: &test-template
    docker:
      - <<: *base
    environment:
      TEST_PART=t
    steps:
      - checkout
      - run: *chown_hack_for_cache
      - restore_cache: *restore_cache
      - run: *check_cache
      - run: *install_cached_packages
      - run: *make_test
      - persist_to_workspace:
          root: .
          paths:
            - cover_db_*

  t.fullstack: &test-fullstack-template
    docker:
      - <<: *base
    environment:
      TEST_PART=fullstack
    steps:
      - checkout
      - run: *chown_hack_for_cache
      - run: *chown_hack_for_cache_fullstack
      - restore_cache: *restore_cache
      - restore_cache: *restore_fullstack_cache
      - run: *check_cache
      - run: *install_cached_packages
      - run: *build_autoinst
      - run: *make_test
      - persist_to_workspace:
          root: .
          paths:
            - cover_db_*

  checkstyle:
    docker:
      - <<: *base
    steps:
      - checkout
      - run: *chown_hack_for_cache
      - restore_cache: *restore_cache
      - run: *check_cache
      - run: *install_cached_packages
      - run: make checkstyle

  t.ui:
    <<: *test-template
    environment:
      TEST_PART=ui

  t.unstable:
    <<: *test-template
    environment:
      TEST_PART=unstable

  t.api:
    <<: *test-template
    environment:
      TEST_PART=api

  t.developer:
    <<: *test-fullstack-template
    environment:
      TEST_PART=developer-fullstack

  t.scheduler:
    <<: *test-fullstack-template
    environment:
      TEST_PART=scheduler-fullstack

  report.codecov:
    docker:
      - <<: *base
    steps:
      - checkout
      - run: *chown_hack_for_cache
      - restore_cache: *restore_cache
      - run: *check_cache
      - run: *install_cached_packages
      - attach_workspace:
          at: .
      - run: make coverage-merge-db
      - run: make coverage-report-codecov
  
  build.docs:
    docker:
      - <<: *base
    environment:
      COMMIT_AUTHOR_EMAIL=skynet@open.qa
    steps:
      - checkout
      - run:
          command: |
            sudo zypper ar -f https://download.opensuse.org/repositories/devel:/languages:/perl/openSUSE_Leap_15.1/ devel-perl
            sudo zypper ar -f https://download.opensuse.org/repositories/devel:/languages:/ruby/openSUSE_Leap_15.1/ devel-ruby
            sudo zypper ar -f https://download.opensuse.org/repositories/devel:/languages:/ruby:/extensions/openSUSE_Leap_15.1/ devel-ruby-extensions
            sudo zypper --gpg-auto-import-keys ref 
            sudo zypper -n install curl python ruby2.6 ruby2.6-rubygem-asciidoctor 'perl(Pod::AsciiDoctor)'
            sudo gem.ruby2.6 install asciidoctor pygments.rb
            sudo gem.ruby2.6 install asciidoctor-pdf --pre
      - run:
          command: |
                publish=1 bash -xe script/generate-documentation https://token@github.com/openqabot/openQA.git

workflows:
  version: 2
  test:
    jobs:
      - build.cache
      - t:
         requires:
           - build.cache
      - t.api:
         requires:
           - build.cache
      - t.ui:
         requires:
           - build.cache
      - t.unstable:
         requires:
           - build.cache
      - build.fullstack.cache:
         requires:
           - build.cache
      - t.fullstack:
         requires:
           - build.fullstack.cache
      - t.developer:
         requires:
           - build.fullstack.cache
      - t.scheduler:
         requires:
           - build.fullstack.cache
      - report.codecov:
         requires:
           - t
           - t.api
           - t.ui
           - t.unstable
           - t.fullstack
           - t.developer
           - t.scheduler
         filters:
           branches:
             only:
               - /pull.*/
               - master
      - checkstyle:
         requires:
           - build.cache
      - build.docs:
         requires:
           - build.cache
         filters:
           branches:
             only:
               - master

  nightly:
   triggers:
     - schedule:
         cron: "0 0 * * *"
         filters:
           branches:
             only:
               - master
   jobs:
      - dependencies-pr
